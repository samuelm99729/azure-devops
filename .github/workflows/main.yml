name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run tests
    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "Tests failed, continuing for debug"

    # Step 5: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t samuelmdevopsacr.azurecr.io/feedback-app:${{ github.sha }} .

    # Step 6: Login to Azure Container Registry
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: samuelmdevopsacr.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # Step 7: Push Docker image to ACR
    - name: Push Docker image to ACR
      run: |
        docker push samuelmdevopsacr.azurecr.io/feedback-app:${{ github.sha }}

    # Step 8: Login to Azure
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 9: Set AKS context
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: aks-devops-project
        resource-group: rg-devops-project-iac

    # Step 10: Update image in deployment YAML and apply
    - name: Update Kubernetes deployment
      run: |
        echo "Updating image tag in deployment..."
        sed -i "s|samuelmdevopsacr.azurecr.io/feedback-app:latest|samuelmdevopsacr.azurecr.io/feedback-app:${{ github.sha }}|g" k8s/deployment.yaml

        echo "Applying updated deployment..."
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    # Step 11: Wait for rollout with retries
    - name: Wait for deployment rollout
      run: |
        echo "Waiting for feedback-app-deployment rollout..."
        if ! kubectl rollout status deployment/feedback-app-deployment --timeout=120s; then
          echo "Rollout failed, showing pod details for debugging..."
          kubectl get pods -o wide
          kubectl describe deployment feedback-app-deployment
          kubectl describe pods | tail -n 50
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -n 20
          exit 1
        fi

    # Step 12: Get Service External IP
    - name: Get service external IP
      run: |
        echo "Fetching external IP of the service..."
        kubectl get svc feedback-app-service -o wide || true
